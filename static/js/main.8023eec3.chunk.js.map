{"version":3,"sources":["reducer.js","context.js","Components/MainPage.js","Components/BabyWerewolf.js","Components/DarkMatter.js","Components/DeadFucker.js","Components/Doctor.js","Components/Dracula.js","Components/FoolVampire.js","Components/Vampire.js","Components/Villager.js","Components/Warrior.js","Components/Werewolf.js","Components/VotingScreen.js","Components/VoteFinishScreen.js","Components/WaitingScreen.js","Components/Game.js","App.js","index.js"],"names":["reducer","state","action","type","i","newPlayers","payload","push","name","class","voteCount","life","players","vampireCount","index","doctorCount","deadFuckerCount","werewolfCount","darkMatterCount","currVampireCount","currDeadFuckerCount","currDoctorCount","currWerewolfCount","currDarkMatterCount","set","forEach","player","randomNum","Math","floor","random","parseInt","waitingScreen","length","turns","remainingPlayers","selectedVillager","villagerVoteCount","mark","antiMark","guess","filter","angel","deathStatement","blood","slay","votingScreen","vote","stacks","voteFinishScreen","trait","maxVoteCount","selectedPlayer","AppContext","React","createContext","initialState","AppProvider","children","useReducer","dispatch","useState","play","setPlay","btn1","setBtn1","btn2","setBtn2","Provider","value","changePlayerCount","number","changeVampireCount","changeName","e","target","classHandler","startGame","nextPlayer","openWaitingScreen","voteForKill","guessDeath","changeClass","guard","bite","resetBlood","saveFromBite","nextVoter","finishVoting","startNextTurn","useGlobalContext","useContext","MainPage","className","disabled","onChange","id","defaultValue","onClick","htmlFor","map","placeholder","BabyWerewolf","currentPlayer","src","alt","Villager","DeadFucker","classList","add","Dracula","FoolVampire","Vampire","console","log","Werewolf","VotingScreen","VoteFinishScreen","villagers","werewolves","window","location","reload","WaitingScreen","Game","Doctor","DarkMatter","Warrior","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8023eec3.chunk.js","sourcesContent":["\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        //Change the player count\r\n        case 'CHANGE_COUNT':\r\n            let i;\r\n            let newPlayers = [];\r\n            for (i = 0; i < action.payload; i++)\r\n                newPlayers.push({ name: '', class: '', voteCount: 0, life: false})\r\n            return { ...state, players: newPlayers }\r\n        \r\n        //Change the vampire count\r\n        case 'CHANGE_VAMPIRE_COUNT':\r\n            return { ...state, vampireCount: action.payload }\r\n        \r\n        //Change player names\r\n        case 'CHANGE_NAME':\r\n            state.players[action.payload.index].name = action.payload.name\r\n            return { ...state }\r\n        \r\n        //Turn the classes on and off\r\n        case 'HANDLE_CLASS':\r\n            if (action.payload === 'doctor')\r\n                if (state.doctorCount === 1)\r\n                    state.doctorCount = 0;\r\n                else\r\n                    state.doctorCount = 1;\r\n            else if (action.payload === 'deadfucker')\r\n                if (state.deadFuckerCount === 1)\r\n                    state.deadFuckerCount = 0;\r\n                else\r\n                    state.deadFuckerCount = 1;\r\n            else if (action.payload === 'werewolf')\r\n                if (state.werewolfCount === 1)\r\n                    state.werewolfCount = 0;\r\n                else\r\n                    state.werewolfCount = 1;\r\n            else if (action.payload === 'darkmatter')\r\n                if (state.darkMatterCount === 1)\r\n                    state.darkMatterCount = 0;\r\n                else\r\n                    state.darkMatterCount = 1;\r\n            \r\n            \r\n            return {...state}\r\n        \r\n        //Randomly attain vampire or villager trait to the players \r\n        case 'START_GAME':\r\n            let currVampireCount = 0;\r\n            let currDeadFuckerCount = 0;\r\n            let currDoctorCount = 0;\r\n            let currWerewolfCount = 0;\r\n            let currDarkMatterCount = 0;\r\n            let set = true;\r\n            while (set) {\r\n                state.players.forEach(player => {\r\n                    let randomNum = Math.floor(Math.random() * 7);\r\n                    //If random number is equal to 1 or 5, player becomes vampire\r\n                    if (randomNum == 1 || randomNum == 5) {\r\n                        currVampireCount += 1;\r\n                        if (currVampireCount < parseInt(state.vampireCount) + 1) {\r\n                            if (randomNum == 1)\r\n                                player.class = 'vampire';\r\n                            else \r\n                                player.class = 'foolvampire';        \r\n                        }else {\r\n                            player.class = 'villager';\r\n                            currVampireCount = currVampireCount - 1; }\r\n                    //If random number is equal to 2, player becomes dead fucker\r\n                    } else if (randomNum == 2) {\r\n                        currDeadFuckerCount += 1;\r\n                        if (currDeadFuckerCount < parseInt(state.deadFuckerCount) + 1)\r\n                            player.class = 'deadfucker'\r\n                        else {\r\n                            player.class = 'villager';\r\n                            currDeadFuckerCount = currDeadFuckerCount - 1;\r\n                        }\r\n                    //If random number is equal to 3, player becomes doctor\r\n                    } else if (randomNum == 3) {\r\n                        currDoctorCount += 1;\r\n                        if (currDoctorCount < parseInt(state.doctorCount) + 1) {\r\n                            player.class = 'doctor';\r\n                        }else {\r\n                            player.class = 'villager';\r\n                            currDoctorCount = currDoctorCount - 1;\r\n                        }\r\n                    //If random number is equal to 4, player becomes werewolf\r\n                    } else if (randomNum == 4) {\r\n                        currWerewolfCount += 1;\r\n                        if (currWerewolfCount < parseInt(state.werewolfCount) + 1) {\r\n                            player.class = 'werewolf';\r\n                        } else {\r\n                            player.class = 'villager';\r\n                            currWerewolfCount = currWerewolfCount - 1;\r\n                        }\r\n                    //If random number is equal to 6, player becomes dark matter\r\n                    } else if (randomNum == 6) {\r\n                        currDarkMatterCount += 1;\r\n                        if (currDarkMatterCount < parseInt(state.darkMatterCount) + 1) {\r\n                            player.class = 'darkmatter';\r\n                        } else {\r\n                            player.class = 'villager';\r\n                            currDarkMatterCount = currDarkMatterCount - 1; }    \r\n                    //If random number is not equal to any of above, player becomes a villager \r\n                    }else \r\n                        player.class = 'villager'\r\n                });\r\n                if (currVampireCount === parseInt(state.vampireCount) && currDeadFuckerCount === parseInt(state.deadFuckerCount) && currDarkMatterCount === parseInt(state.darkMatterCount) \r\n                    && currDoctorCount === parseInt(state.doctorCount) && currWerewolfCount === parseInt(state.werewolfCount)) {\r\n                    set = false;\r\n                } else { currVampireCount = 0; currDeadFuckerCount = 0; currDoctorCount = 0; currWerewolfCount = 0; currDarkMatterCount = 0;}    \r\n            }\r\n            return { ...state }\r\n        \r\n        //Wait for the next player to start\r\n        case 'WAITING_SCREEN':\r\n            return { ...state, waitingScreen: true }\r\n        \r\n        //Skip to next player and open voting screen if last players turn is past\r\n        case 'NEXT_PLAYER':\r\n            //Kill the most voted villager and open voting screen  \r\n            if (action.payload + 1 === state.players.length && state.turns !== 0) {\r\n                let remainingPlayers = [];\r\n                let selectedVillager = null;\r\n                let villagerVoteCount = 0;\r\n                state.players.forEach(player => {\r\n                    if (player.mark && !player.antiMark)\r\n                        player.class = 'babywerewolf'\r\n                    if (player.voteCount > villagerVoteCount) {\r\n                        selectedVillager = player;\r\n                        villagerVoteCount = player.voteCount;\r\n                    } else if (player.voteCount === villagerVoteCount)\r\n                        selectedVillager = null;\r\n                });\r\n\r\n                //Check if dead fucker guessed correct\r\n                if (state.guess === selectedVillager) \r\n                    state.players.filter(player => player.class === 'deadfucker')[0].angel = true;\r\n                \r\n                //If someone is dead, check if he has life or angel which saves them from death\r\n                if (selectedVillager) {\r\n                    if (selectedVillager.life) {\r\n                        state.deathStatement = 'No one is fucking dead!!';\r\n                        remainingPlayers = state.players;\r\n                        state.blood -= 1;\r\n                    } else if (selectedVillager.angel) {\r\n                        state.deathStatement = 'No one is fucking dead!!';\r\n                        remainingPlayers = state.players;\r\n                        selectedVillager.angel = false;\r\n                        state.blood -= 1;\r\n                    } else {\r\n                        remainingPlayers = state.players.filter(player => player !== selectedVillager);\r\n                        state.deathStatement = `${selectedVillager.name} is dead!!!`;\r\n                        state.blood = 2;\r\n                    }\r\n                } else {\r\n                    state.deathStatement = 'No one is fucking dead!!';\r\n                    remainingPlayers = state.players;\r\n                    state.blood -= 1;\r\n                }\r\n                //Check blood, if it's 0, vitaminless vampires die\r\n                if (state.blood == 0 && state.players.filter(player => player.class === 'foolvampire')) {\r\n                    state.deathStatement += 'Oh, by the way.All the vitaminless vampires left the village...'\r\n                    remainingPlayers = state.players.filter(player => player.class !== 'foolvampire');\r\n                }\r\n                //Check if warrior has killed anyone\r\n                remainingPlayers = remainingPlayers.filter(player => !player.slay)\r\n                //Reset life and vote attributes\r\n                state.players.forEach(player => { player.voteCount = 0; player.life = false });\r\n                return {...state, waitingScreen: false, votingScreen: true,vote: false,guess: {},\r\n                        index: 0, turns: state.turns + 1,stacks: state.stacks + 1, players: remainingPlayers}\r\n                    \r\n            }\r\n            //First round no killing\r\n            else if (action.payload + 1 === state.players.length) {\r\n                state.players.forEach(player => { player.voteCount = 0; player.life = false });\r\n                return {...state, index: 0, vote:false,voteFinishScreen:true, waitingScreen:false, turns: state.turns + 1}\r\n            }\r\n            //Before the last players turn\r\n            else\r\n                return { ...state, index: action.payload + 1,waitingScreen:false, vote: false }\r\n          \r\n        //Vote for a villager to kill\r\n        case 'KILL_VOTE':\r\n            state.players[action.payload].voteCount += 1; \r\n            return { ...state, vote: true }\r\n        \r\n        //Deadfucker trait\r\n        case 'GUESS_DEATH':\r\n            return { ...state, guess: state.players[action.payload], vote: true }\r\n        \r\n        //Doctor trait\r\n        case 'GUARD_PLAYER':\r\n            state.players[action.payload].life = true;\r\n            return { ...state, vote: true }\r\n        \r\n        //Werewolf trait\r\n        case 'WEREWOLF_BITE':\r\n            state.players[action.payload].mark = 'true';\r\n            return { ...state, vote: true }\r\n        \r\n        //Dark Matter trait\r\n        case 'TRANSFORM':\r\n            state.players[action.payload.index].class = action.payload.trait;\r\n            return { ...state, vote: true }\r\n        \r\n        //Dracula traits\r\n        case 'RESET_BLOOD':\r\n            return { ...state, blood: 2 }\r\n        \r\n        case 'ANTI_MARK':\r\n            state.players[action.payload].antiMark = true;\r\n            return { ...state }\r\n        \r\n        //Warrior Trait\r\n        case 'SLAY_VAMPIRE':\r\n            state.players[action.payload].slay = true;\r\n            return { ...state, vote: true}\r\n\r\n        //Get to the next voter\r\n        case 'NEXT_VOTER':\r\n            return { ...state, index: action.payload + 1, vote: false }\r\n        \r\n        //After votes are complete\r\n        case 'FINISH_VOTE':\r\n            //See who has the most votes\r\n            let remainingPlayers = [];\r\n            let maxVoteCount = 0;\r\n            let selectedPlayer = null;\r\n            state.players.forEach(player => {\r\n                if (player.voteCount > maxVoteCount) {\r\n                    maxVoteCount = player.voteCount;\r\n                    selectedPlayer = player;\r\n                } else if (player.voteCount === maxVoteCount)\r\n                    selectedPlayer = null; });\r\n            \r\n            if (selectedPlayer) {\r\n                remainingPlayers = state.players.filter(player => player !== selectedPlayer);\r\n                state.deathStatement = `${selectedPlayer.name} has left the village!!!`;\r\n            } else {\r\n                state.deathStatement = 'Everyone stays!';\r\n                remainingPlayers = state.players; }\r\n            \r\n            return {...state, index: 0, votingScreen: false, voteFinishScreen: true, players: remainingPlayers}\r\n                \r\n        //Start the next turn\r\n        case 'NEXT_TURN':\r\n            state.players.forEach(player => player.voteCount = 0);\r\n            return {...state,vote: false, voteFinishScreen: false}\r\n    }\r\n}\r\nexport default reducer;","import { useContext, useReducer, useState } from 'react'\r\nimport React from 'react'\r\nimport reducer from './reducer'\r\n\r\nconst AppContext = React.createContext();\r\n//Starting state\r\nconst initialState = {\r\n    votingScreen: false,\r\n    waitingScreen: false,\r\n    voteFinishScreen: false,\r\n    vote: false,\r\n    turns: 0,\r\n    index: 0,\r\n    vampireCount: 1,\r\n    deadFuckerCount: 0,\r\n    doctorCount: 0,\r\n    werewolfCount: 0,\r\n    darkMatterCount: 0,\r\n    blood: 2,\r\n    stacks: 0,\r\n    guess:{},\r\n    players: [{ name: '', class: '', life: false, voteCount: 0 }, { name: '', class: '', voteCount: 0 , life: false},\r\n    { name: '', class: '', voteCount: 0 , life: false}, { name: '', class: '', voteCount: 0 , life: false}],\r\n    deathStatement: 'Hope you all learned your roles.Good luck!'\r\n  }\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [play, setPlay] = useState(false);\r\n  const [btn1, setBtn1] = useState(true);\r\n  const [btn2, setBtn2] = useState(true);\r\n\r\n  //Adjustments before the game starts\r\n  const changePlayerCount = (number) => {\r\n      dispatch({type:'CHANGE_COUNT', payload: number})\r\n  }\r\n\r\n  const changeVampireCount = (number) => {\r\n    dispatch({type:'CHANGE_VAMPIRE_COUNT', payload: number})\r\n  }\r\n\r\n  const changeName = (e, index) => {\r\n      let name = e.target.value;\r\n      dispatch({type:'CHANGE_NAME', payload:{name, index}})\r\n  }\r\n\r\n  const classHandler = (trait) => {\r\n      dispatch({type:'HANDLE_CLASS', payload: trait})\r\n  }\r\n\r\n  //After clicking the start button\r\n  const startGame = () => {\r\n    dispatch({ type: 'START_GAME' })\r\n    setPlay(true);\r\n  }\r\n\r\n  const openWaitingScreen = (index) => {\r\n    if (index === state.players.length - 1)\r\n      dispatch({ type: 'NEXT_PLAYER', payload: index })\r\n    else\r\n      dispatch({type: 'WAITING_SCREEN'})\r\n  }\r\n\r\n  const nextPlayer = (index) => {\r\n      dispatch({type:'NEXT_PLAYER', payload:index})\r\n  }\r\n  \r\n  //Class skills\r\n\r\n  //Vampire\r\n  const voteForKill = (index) => {\r\n      dispatch({ type: 'KILL_VOTE', payload: index })\r\n  }\r\n\r\n  //Plague Doctor\r\n  const guard = (index) => {\r\n      dispatch({type: 'GUARD_PLAYER', payload: index})\r\n  }\r\n\r\n  //Dead Fucker\r\n  const guessDeath = (index) => {\r\n    dispatch({ type: 'GUESS_DEATH', payload: index })\r\n  }\r\n\r\n  //Werewolf\r\n  const bite = (index) => {\r\n    dispatch({type: 'WEREWOLF_BITE', payload: index})\r\n  }\r\n\r\n  //Dark Matter\r\n  const changeClass = (trait, index) => {\r\n    dispatch({ type: 'TRANSFORM', payload: { trait, index } })\r\n  }\r\n\r\n  //Dracula\r\n  const resetBlood = () => {\r\n    dispatch({type: 'RESET_BLOOD'})\r\n  }\r\n\r\n  const saveFromBite = (index) => {\r\n    dispatch({ type: 'ANTI_MARK', payload: index })\r\n  }\r\n\r\n  //Warrior\r\n  const slay = (index) => {\r\n    dispatch({ type: 'SLAY_VAMPIRE', payload: index})\r\n  }\r\n\r\n  //Voting\r\n  const nextVoter = (index) => {\r\n    dispatch({ type: 'NEXT_VOTER', payload: index})\r\n  }\r\n\r\n  const finishVoting = () => {\r\n    dispatch({type: 'FINISH_VOTE'})\r\n  }\r\n\r\n  const startNextTurn = () => {\r\n    dispatch({ type: 'NEXT_TURN' })\r\n  }\r\n\r\n  return (\r\n      <AppContext.Provider\r\n      value={{\r\n        changePlayerCount, changeVampireCount, changeName, classHandler, play,\r\n        startGame, nextPlayer, openWaitingScreen, voteForKill, guessDeath, changeClass,\r\n        guard, bite, resetBlood, saveFromBite,slay, nextVoter, finishVoting, startNextTurn,\r\n        btn1, setBtn1, btn2, setBtn2, ...state\r\n      }}\r\n      >\r\n        {children}\r\n      </AppContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext)\r\n}\r\n  \r\nexport { AppContext, AppProvider }","import { useGlobalContext } from '../context'\r\n\r\nfunction MainPage() {\r\n    const {players, changePlayerCount,changeVampireCount, changeName, startGame, classHandler} = useGlobalContext();\r\n    return (\r\n        <div className='container border w-100'>\r\n            <h2 className='text-center headline'>Vampire vs. Villagers by bergalii</h2>\r\n            <div className=\"input-group mt-0\">\r\n                <button disabled='disable' className='btn btn-dark count'>Player Count</button>\r\n                <select onChange={(e) => changePlayerCount(e.target.value)} className=\"custom-select rounded\" id=\"inputGroupSelect01\">\r\n                    <option defaultValue=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"6\">6</option>\r\n                    <option value=\"7\">7</option>\r\n                    <option value=\"8\">8</option>\r\n                    <option value=\"9\">9</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"11\">11</option>\r\n                    <option value=\"12\">12</option>\r\n                </select>\r\n                <button disabled='disable' className='btn btn-dark count rounded'>Vampire Count</button>\r\n                <select onChange={(e) => changeVampireCount(e.target.value)} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                    <option defaultValue=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"input-group classes\">\r\n                <div className=\"custom-control custom-switch mt-2 mb-2 ml-4\">\r\n                            <input onClick={() => classHandler ('doctor')} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n                            <label className=\"custom-control-label white class\" htmlFor=\"customSwitch1\">Plague Doctor</label>\r\n                </div>\r\n                <div className=\"custom-control custom-switch mt-2 mb-2 ml-4\">\r\n                            <input onClick={() => classHandler('deadfucker')} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch2\"/>\r\n                            <label className=\"custom-control-label white class\" htmlFor=\"customSwitch2\">Dead Fucker</label>\r\n                </div>\r\n                <div className=\"custom-control custom-switch mt-2 mb-2 ml-4\">\r\n                            <input onClick={() => classHandler('werewolf')} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch3\"/>\r\n                            <label className=\"custom-control-label white class\" htmlFor=\"customSwitch3\">Werewolf</label>\r\n                </div>\r\n                <div className=\"custom-control custom-switch mt-2 mb-2 ml-4\">\r\n                            <input onClick={() => classHandler('darkmatter')} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch4\"/>\r\n                            <label className=\"custom-control-label white class\" htmlFor=\"customSwitch4\">Dark Matter</label>\r\n                </div>\r\n            </div>\r\n            <div className='names'>\r\n                {\r\n                    players.map((player, index) => {\r\n                        return (\r\n                            <div key={index} className=\"input-group input-group-sm mb-3 name-input rounded\">\r\n                                <button disabled='disable' className='btn btn-dark playernumber'>{index + 1}.</button>\r\n                                <input type=\"text\" className=\"form-control name\" value={player.name} placeholder='Name' onChange={(e) => changeName(e, index)} />\r\n                            </div>\r\n                       )\r\n                   }) \r\n                }\r\n            </div>\r\n            <button className='btn btn-dark  next' onClick={startGame}>Play</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useGlobalContext } from '../context'\r\n\r\nfunction BabyWerewolf() {\r\n    const {index,players, openWaitingScreen} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}({currentPlayer.class})</h4>\r\n            <p className='text-center'>You were bitten by the werewolf last turn.I don't know what was your role before, but from now on you will live your life as a cute doggy.\r\n            To win the game, you need to leave the village with your father (master werewolves) and brothers (if any exists) by eliminating all villagers and vampires.</p>\r\n            <div className='d-flex'>\r\n                <img  src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'werewolf' || player.class === 'babywerewolf' )\r\n                            return (<button className='btn btn-gradient border' disabled='disabled' key={index}>{player.name}</button>)     \r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BabyWerewolf;","import { useGlobalContext } from '../context'\r\n\r\nfunction Villager() {\r\n    const {index,players, openWaitingScreen, vote, changeClass} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Dark Matter)</h4>\r\n            <p className='text-center'>You were sent from above to this small village.It's hard to describe what you are.But one thing is for sure,\r\n            you can't live on your own like thism you are too weak.You have seize someones body before it's too late.</p>\r\n            <p>Pick a side!Each side gives you different perks;</p>\r\n            <p>Vampire side:You become vampire lord </p>\r\n            <p>Villager side:You become a might warrior</p>\r\n            <div className='d-flex bg-light'>\r\n                <img  src={`./img/${currentPlayer.class}.png`} alt=\"\"/>\r\n                <div className='btn-holder'>\r\n                    <button disabled={vote ? 'disabled' : ''} onClick={() => { changeClass('warrior', index) }} className='btn btn-success border select' key={index}>Villager</button>\r\n                    <button disabled={vote ? 'disabled' : ''} onClick={() => { changeClass('dracula', index) }} className='btn btn-danger border select'  key={index + 1}>Vampire</button>)\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Villager;","import { useGlobalContext } from '../context'\r\n\r\nfunction DeadFucker() {\r\n    const { players, index, guessDeath, vote,turns, openWaitingScreen} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Dead fucker)</h4>\r\n            <p className='text-center'>Hello deadfucker!I know you have the least lovable role in the game, but don't be sad!\r\n            You have a very special power, a power that lets you guess who is going to die each round and if you get it right you get an extra life!\r\n            What is cooler than that?And lastly, don't forget that you're still on the villager team.Even tough you want them dead... </p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        return (<button disabled={vote || currentPlayer.angel ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-dark'} onClick={(e) => { guessDeath(index); e.target.classList.add('selected') }} key={index}>{`${player.name}`}</button>)         \r\n                    })\r\n                }\r\n            </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeadFucker;","import { useGlobalContext } from '../context'\r\n\r\nfunction Villager() {\r\n    const {index,players, openWaitingScreen,turns, guard, vote} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Plague Doctor)</h4>\r\n            <p className='text-center'>You may look like a bad guy and, but you actually are a mysterious doctor who doesn't like to show his face,\r\n            and you are here to save the poor villagers. Each turn, you can select a player to save from death(yourself included).Don't let the vampires figure out who you are, or you'll\r\n            end up dead immediately!Note:Dead fuckers can't be guarded.</p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'villager' || player.class === 'doctor' || player.class === 'warrior')\r\n                            return (\r\n                                <button disabled={vote ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-success'} onClick={(e) => { guard(index); e.target.classList.add('selected')}} key={index}>{`${player.name}`}</button>)\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Villager;","import { useGlobalContext} from '../context'\r\n\r\n\r\nfunction Dracula() {\r\n    const { players, index, voteForKill, resetBlood, saveFromBite,\r\n        vote, openWaitingScreen, turns, btn1, btn2, setBtn1, setBtn2 } = useGlobalContext();\r\n    \r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Dracula)</h4>\r\n            <p className='text-center'>The ruler of all vampires.You are a legendary being who reigns the Castlevania territory.Your job here is simple, tear the village down!\r\n            Additionally to the ordinary vampires, you can save your poor vitaminless vampires from dying once and you can once save yourself from a werewolf bite.</p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'vampire' || player.class === 'foolvampire' || player.class === 'dracula')\r\n                            return (<button className='btn btn-danger border' disabled='disabled' key={index}>{player.name}</button>)\r\n                        else \r\n                            return (<button disabled={vote ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-dark'} onClick={(e) => { voteForKill(index); e.target.classList.add('selected') }} key={index}>{`${player.name}(${player.voteCount})`}</button>)           \r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className={btn1 ? 'btn btn-dracula' : 'hidden'} onClick={(e) => { resetBlood(); setBtn1(false) }}>Save Vampires</button>\r\n            <button className={btn2 ? 'btn btn-dracula' : 'hidden'} onClick={(e) => { saveFromBite(index); setBtn2(false) }}>Save Yourself</button>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dracula;","import { useGlobalContext } from '../context'\r\n\r\nfunction FoolVampire() {\r\n    const { players, index, voteForKill, vote, openWaitingScreen, turns } = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Vitaminless Vampire)</h4>\r\n            <p className='text-center'>You are a vampire, but with a twist.Because you were fed milk instead of blood, unlike your normal vampires friends as a child, you grew weak.Now as a vitaminless\r\n            vampire,you can't go no further than two rounds without killing someone.Otherwise, as you may have guessed...You will be dead.Good luck! </p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'vampire' || player.class === 'foolvampire' || player.class === 'dracula')\r\n                            return (<button className='btn btn-danger border' disabled='disabled' key={index}>{player.name}</button>)\r\n                        else \r\n                            return (<button disabled={vote ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-dark'} onClick={(e) => { voteForKill(index); e.target.classList.add('selected') }} key={index}>{`${player.name}(${player.voteCount})`}</button>)           \r\n                          \r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FoolVampire;","import { useGlobalContext } from '../context'\r\n\r\nfunction Vampire() {\r\n    const { players, index, voteForKill, vote, openWaitingScreen, turns } = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Vampire)</h4>\r\n            <p className='text-center'>You are a vampire!You can select a non-vampire player to kill each round.At the end of the round ,player with the most votes that you and your vampire accomplices (if you have any)\r\n             have chosen to kill,is going to (hopefully) die!You better don't let them villagers win, you are fucking vampire dude!</p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'vampire' || player.class === 'foolvampire' || player.class === 'dracula')\r\n                            return (<button className='btn btn-danger border' disabled='disabled' key={index}>{player.name}</button>)\r\n                        else \r\n                            return (<button disabled={vote ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-dark'} onClick={(e) => { voteForKill(index); e.target.classList.add('selected')}} key={index}>{`${player.name}(${player.voteCount})`}</button>)\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Vampire;","import { useGlobalContext } from '../context'\r\n\r\nfunction Villager() {\r\n    const {index,players, openWaitingScreen} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Villager)</h4>\r\n            <p className='text-center'>You probably have the most exciting role in the game(!)You are a farming, bad smelling, poor fucking villager!\r\n            Just don't make it obvious and pass the phone to the next player.</p>\r\n            <img className='d-block mx-auto' src={`./img/${currentPlayer.class}.png`} alt=\"\"/>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Villager;","import { useGlobalContext } from '../context'\r\n\r\nfunction Vampire() {\r\n    const { players, index, slay, vote, openWaitingScreen, stacks} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    console.log(stacks)\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Warrior)</h4>\r\n            <p className='text-center'>You are a veteran, ruthless warrior who has served the royal family for years.Now your path crosses this small village.\r\n            But of course,if it was a regular village, you wouldn't be in this game.This village is haunted by vampires and you will do your best to save the villagers.\r\n            Each round you don't die, you gain stacks.After you have four stacks, you can start killing vampires!</p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (stacks > 3 && (player.class === 'vampire' || player.class === 'foolvampire' || player.class === 'dracula'))\r\n                            return (<button disabled={vote ? 'disabled' : ''} className='btn btn-danger border' onClick={(e) => { slay(index); e.target.classList.add('selected')}} key={index}>{player.name}</button>)\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Vampire;","import { useGlobalContext } from '../context'\r\n\r\nfunction Werewolf() {\r\n    const { players, index, vote, openWaitingScreen, turns, bite } = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border border-dark'>\r\n            <h4 className='text-center'>{currentPlayer.name}(Werewolf)</h4>\r\n            <p className='text-center'>Like the vampires were not enough, you came from the \"Doggo Land\" to bring terror to the villagers.Each turn you can select a player to turn them into a baby werewolf who is \r\n            absolutely harmless, cute little dog.Your goal is simple, you want to leave the village with as many baby werewolfs as possible.Why do you want to do that??Because your wife always wanted to have children but\r\n            you were neutered by your former owner...You can't let your wife down!If you turn all players into werewolves, you win!Now go have some babies!\r\n            </p>\r\n            <div className='d-flex'>\r\n                <img src={`./img/${currentPlayer.class}.png`} alt=\"\" />\r\n                <div className='btn-holder'>{\r\n                    players.map((player, index) => {\r\n                        if (player.class === 'werewolf' || player.class === 'babywerewolf' )\r\n                            return (<button className='btn btn-gradient border' disabled='disabled' key={index}>{player.name}</button>)\r\n                        else \r\n                            return (<button disabled={vote ? 'disabled' : ''} className={turns === 0 ? 'hidden' : 'btn btn-dark'} onClick={(e) => { bite(index); e.target.classList.add('selected') }} key={index}>{`${player.name}`}</button>)\r\n                            \r\n                           \r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-dark next' onClick={() => openWaitingScreen(index)}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Werewolf;","import { useGlobalContext } from '../context'\r\n\r\nfunction VotingScreen() {\r\n    const { players, index, deathStatement, voteForKill, vote, nextVoter, finishVoting} = useGlobalContext();\r\n    let currentPlayer = players[index];\r\n    return (\r\n        <div className='container border text-center'>\r\n            <p className='mt-4'>{deathStatement}Now vote to eliminate a player.</p>\r\n            <p>Player to vote: {currentPlayer.name}</p>\r\n            <button className={index === players.length - 1 ? 'hidden' : 'btn btn-dark pl-5 pr-5'} onClick={() => nextVoter(index)}>Next voter</button>\r\n            <button className={index !== players.length -1 ? 'hidden' : 'btn btn-dark pl-5 pr-5'} onClick={() => finishVoting()}>Finish Voting</button>\r\n            <div className='vote-buttons'>\r\n                {players.map((player, index) => {\r\n                    return (<button key={index} disabled={vote ? 'disabled' : ''} className='btn vote-btn text-center btn-dark p-4 m-1' onClick={() => voteForKill(index)}>{`${player.name}(${player.voteCount})`}</button> ) \r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VotingScreen;","import { useGlobalContext } from '../context'\r\n\r\nfunction VoteFinishScreen() {\r\n    const { deathStatement, turns, startNextTurn, players } = useGlobalContext();\r\n    let villagers = players.filter(player => player.class === 'villager' || player.class === 'doctor' || player.class === 'deadfucker' || player.class === 'warrior')\r\n    let werewolves = players.filter(player => player.class === 'werewolf' || player.class === 'babywerewolf')\r\n    if (villagers.length == 1 && werewolves.length == 0)\r\n        return (\r\n            <div className='container border skip'>\r\n                <h4>Vampires Win!</h4>\r\n                <button onClick={() => window.location.reload()} className='btn btn-dark next'>Play again</button>\r\n            </div>\r\n        )\r\n    else if (villagers.length == 1 && villagers[0].class === 'doctor')\r\n        return (\r\n            <div className='container border skip'>\r\n                <h4>It's a draw ?!</h4>\r\n                <button onClick={() => window.location.reload()} className='btn btn-dark next'>Play again</button>\r\n            </div>\r\n        )\r\n    else if (villagers.length === players.length)\r\n        return (\r\n            <div className='container border skip'>\r\n                <h4>Villagers Win!</h4>\r\n                <button onClick={() => window.location.reload()} className='btn btn-dark next'>Play again</button>\r\n            </div>\r\n        )\r\n    else if (werewolves.length === players.length)\r\n        return (\r\n        <div className='container border skip'>\r\n            <h4 >Werewolves Win!</h4>\r\n            <button onClick={() => window.location.reload()} className='btn btn-dark next'>Play again</button>\r\n        </div>\r\n        )\r\n    else\r\n        return (\r\n            <div className='container border skip'>\r\n                <h4 className='mt-5'>{deathStatement}</h4>\r\n                <img src=\"./img/village.png\" alt=\"\"/>\r\n                <button onClick={startNextTurn} className='btn btn-dark next'>{`Start the ${turns}. day`}</button>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default VoteFinishScreen;","import { useGlobalContext } from '../context'\r\n\r\nfunction WaitingScreen() {\r\n    const { players, index, nextPlayer} = useGlobalContext();\r\n    \r\n    return (\r\n        <div className='container border skip'>\r\n            <h3 className='m-3 mb-5'>Next Player: {players[index + 1].name}</h3>\r\n            <img src=\"./img/devil.png\" alt=\"\"/>\r\n            <button  className='btn btn-dark next' onClick={() => nextPlayer(index)}>next player</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WaitingScreen;","import { useGlobalContext } from '../context'\r\nimport BabyWerewolf from './BabyWerewolf'\r\nimport DarkMatter from './DarkMatter'\r\nimport DeadFucker from './DeadFucker'\r\nimport Doctor from './Doctor'\r\nimport Dracula from './Dracula'\r\nimport FoolVampire from './FoolVampire'\r\nimport Vampire from './Vampire'\r\nimport Villager from './Villager'\r\nimport Warrior from './Warrior'\r\nimport Werewolf from './Werewolf'\r\nimport VotingScreen from './VotingScreen'\r\nimport VoteFinishScreen from './VoteFinishScreen'\r\nimport WaitingScreen from './WaitingScreen'\r\n\r\n\r\n\r\nfunction Game() {\r\n    const { players, index, votingScreen, voteFinishScreen, waitingScreen, blood } = useGlobalContext();\r\n    //Show the current player\r\n    let currentPlayer = players[index];\r\n    //Screen after votes are completed\r\n    if (voteFinishScreen) \r\n        return(<VoteFinishScreen></VoteFinishScreen>)\r\n        \r\n    //Voting screen\r\n    else if (votingScreen)\r\n        return (<VotingScreen></VotingScreen>)\r\n        \r\n    //Screen between the players turns\r\n    else if (waitingScreen)\r\n        return (<WaitingScreen></WaitingScreen>)\r\n        \r\n    //Screen if player is a vampire\r\n    else if (currentPlayer.class === 'vampire')\r\n        return (<Vampire></Vampire>)\r\n    \r\n    //Screen if player is a villager\r\n    else if (currentPlayer.class === 'villager')\r\n        return (<Villager></Villager>)\r\n    \r\n    //Screen if player is a deadfucker\r\n    else if (currentPlayer.class === 'deadfucker')\r\n        return (<DeadFucker></DeadFucker>)\r\n    \r\n    //Screen if player is a doctor\r\n    else if (currentPlayer.class === 'doctor')\r\n        return (<Doctor></Doctor>)\r\n    \r\n    //Screen if player is vitaminless vampire\r\n    else if (currentPlayer.class === 'foolvampire')\r\n        return (<FoolVampire></FoolVampire>)\r\n    \r\n    //Screen if player is werewolf\r\n    else if (currentPlayer.class === 'werewolf')\r\n        return (<Werewolf></Werewolf>)\r\n    \r\n    //Screen if player is baby werewolf\r\n    else if (currentPlayer.class === 'babywerewolf')\r\n        return (<BabyWerewolf></BabyWerewolf>)\r\n    \r\n    //Screen if player is dark matter\r\n    else if (currentPlayer.class === 'darkmatter')\r\n        return (<DarkMatter></DarkMatter>)\r\n\r\n    //Screen if player is warrior\r\n    else if (currentPlayer.class === 'warrior')\r\n        return (<Warrior></Warrior>)\r\n    \r\n    //Screen if player is dracula\r\n    else if (currentPlayer.class === 'dracula')\r\n        return (<Dracula></Dracula>)\r\n}\r\n\r\nexport default Game;","import MainPage from './Components/MainPage'\nimport Game from './Components/Game'\nimport { useGlobalContext } from './context'\n\nfunction App() {\n  const {play } = useGlobalContext();\n  if (!play) \n    return (<MainPage></MainPage>)\n  else \n    return (<Game></Game>)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AppProvider } from './context'\n\nReactDOM.render(\n    <AppProvider>\n        <App />\n    </AppProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}